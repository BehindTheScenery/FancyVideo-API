//######################################################################################################################
//                                              Build Plugin Declaration
//######################################################################################################################
plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'net.minecraftforge.gradle' version '5.+'
    id 'eclipse'
}

//######################################################################################################################
//                                               Artefact Specification
//######################################################################################################################
if (minecraft_version_min_forge != minecraft_version) {
    archivesBaseName = "${mod_name}-forge-${minecraft_version_min_forge}-${minecraft_version}"
} else {
    archivesBaseName = "${mod_name}-forge-${minecraft_version}"
}

//######################################################################################################################
//                                                Project Dependencies
//######################################################################################################################
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect {
            it.absolutePath
        }.join(File.pathSeparator)
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

//######################################################################################################################
//                                                 Run Configurations
//######################################################################################################################
    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client-1.19'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // This one's important, why is the default config so bad?
            property 'log4j.configurationFile', 'config\\log4j2.xml'
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server-1.19'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // This one's important, why is the default config so bad?
            property 'log4j.configurationFile', 'config\\log4j2.xml'
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

//######################################################################################################################
//                                                    Build Tasks
//######################################################################################################################
shadowJar {
    archiveClassifier.set('')
    archiveVersion.set(project.version_main + project.version)
    configurations = [project.configurations.library]
    finalizedBy 'reobfShadowJar'
    exclude 'META-INF/maven/**'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}


jar.finalizedBy('reobfJar')

//######################################################################################################################
//                                                      Publish
//######################################################################################################################
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version_main + project.version
            artifact shadowJar

            pom {
                name = "${mod_name} ${project.name}"
                description = 'This API provides easy ways for mod developers to play videos in a resource friendly way in Minecraft.'
                url = 'https://www.curseforge.com/minecraft/mc-mods/fancyvideo-api'
                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/'
                    }
                }
                developers {
                    developer {
                        id = mod_author
                        name = mod_author
                        email = mod_author_email
                    }
                }
                scm {
                    url = 'https://github.com/Nick1st/FancyVideo-API-1.18'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username = project.hasProperty('mavenUsername') ? mavenUsername : ""
                password = project.hasProperty('mavenPassword') ? mavenPassword : ""
            }
            authentication {
                basic(BasicAuthentication)
            }
            name = "nick1st-repository-releases"
            url = "https://maven.nick1st.dns.navy/releases"
        }
    }
}

publish.dependsOn('reobfShadowJar')