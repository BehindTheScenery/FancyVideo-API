subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()
        
    jar {
        archiveClassifier.set('slim')
        archiveVersion.set(project.version)
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version_min
            ])
        }
    }
    
    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
    }

    configurations {
        library
        implementation.extendsFrom library
    }

    dependencies {
        library("uk.co.caprica:vlcj:${vlcj_version}") { // Fallback: Direct download from https://oss.sonatype.org/content/repositories/snapshots/uk/co/caprica/
            exclude group: 'net.java.dev.jna', module: 'jna'
            exclude group: 'net.java.dev.jna', module: 'jna-platform'
        } // vlcJ
    }
    

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

if (file('credentials.gradle').exists()) {
    apply from: 'credentials.gradle'
    println(mod_name)
}